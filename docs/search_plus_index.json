{"./":{"url":"./","title":"介绍","keywords":"","body":"介绍 我将在这里写leetcode题解，使用java Copyright ©gclstart 2020 all right reserved，powered by Gitbook发布时间： 2020-08-07 15:48:05 "},"1-100/1.两数之和.html":{"url":"1-100/1.两数之和.html","title":"1.两数之和","keywords":"","body":"题目描述（简单难度） 解法一：暴力 暴力求解，两层循环 public int[] twoSum(int[] nums, int target) { int[] ans = new int[2]; for (int i = 0; i 时间复杂度：O(n2n^2n​2​​) 空间复杂度：O(1) 解法二：map集合 在解法一中的第二个for循环 for (int j = i + 1; j 我们换个理解方式 sub=target-nums[i]; for(int j=(i+1);j 第二层for循环无非是遍历所有的元素，看哪个元素等于sub，时间复杂度是O(n) 有没有一种方法，不用遍历就可以找到元素里有没有等于sub的？ 利用map集合！！！ 我们可以把数组的每个元素作为map的key，下标作为map的value，为什么不能反过来key-下标，value-元素呢？因为java的HashMap只能通过key找到value，不能通过value找到key，value不是唯一的，key是唯一的。 现在只需判断sub在不在key里面就可以了，而此时的时间复杂度为O(1)。 需要注意的地方是，还需判断找到的元素不是当前元素，因为题目里讲一个元素只能用一次。 public int[] twoSum(int[] nums, int target) { HashMap map = new HashMap<>(); for (int i = 0; i 时间复杂度：比解法一少了一个for循环，降为O(n) 空间复杂度：所谓的空间换时间，这里就能体现出来，开辟了一个hashmap，空间复杂度变为O(n) 解法三：优化 看解法二中，两个 for 循环，他们长的一样，我们当然可以把它合起来。复杂度上不会带来什么变化，变化仅仅是不需要判断是不是当前元素了，因为当前元素还没有添加进hashmap里。 public int[] twoSum(int[] nums, int target) { HashMap map = new HashMap<>(); int[] ans = new int[2]; for (int i = 0; i 总结 hashmap的应用，使得时间复杂度从O(n2n^2n​2​​)降为O(n) Copyright ©gclstart 2020 all right reserved，powered by Gitbook发布时间： 2020-08-10 16:37:42 "},"1-100/2.两数相加.html":{"url":"1-100/2.两数相加.html","title":"第2题","keywords":"","body":"题目描述（中等难度） 解法 这道题目可以直接求解，但这里面还是有一点技巧的，尤其是下面三句代码 while (l1 != null || l2 != null || carry > 0) { int x = (l1 == null) ? 0 : l1.val; int y = (l2 == null) ? 0 : l2.val; 即使链表到了最后，继续遍历，把它当作0就好了，不影响结果 另外用一个cur指针记录最后一个节点，用于添加新的节点 public ListNode addTwoNumbers(ListNode l1, ListNode l2) { ListNode ans = new ListNode(0); ListNode cur = ans; int carry = 0; while (l1 != null || l2 != null || carry > 0) { int x = (l1 == null) ? 0 : l1.val; int y = (l2 == null) ? 0 : l2.val; int sum = x + y + carry; carry = sum / 10; ListNode node = new ListNode(sum % 10); cur.next = node; cur = node; if (l1 != null) { l1 = l1.next; } if (l2 != null) { l2 = l2.next; } } return ans.next; } 初始化的节点 ans 没有存储值，最后返回 ans 的 next 。这样的好处是不用单独对 head 进行判断改变值。也就是如果一开始的 head 就是代表个位数，那么开始初始化的时候并不知道它的值是多少，所以还需要在进入循环前单独对它进行值的更正，不能像现在一样只用一个循环简洁。 时间复杂度：O(max(m, n))，m 和 n分别表示 l1和 l2 的长度。 空间复杂度：O(max(m, n)) Copyright ©gclstart 2020 all right reserved，powered by Gitbook发布时间： 2020-08-10 09:14:16 "}}